module Workarea
  decorate Pricing::Collection, with: :flow_io do
    def regular_min_price_sku
      @regular_min_price_sku ||= generic_prices
        .map { |p| [p.sku, p.regular] }
        .sort_by { |(_sku, regular)| regular }
        .first
        &.first
    end

    def regular_max_price_sku
      @regular_max_price_sku ||= generic_prices
        .map { |p| [p.sku, p.regular] }
        .sort_by { |(_sku, regular)| regular }
        .last
        &.first
    end

    def sale_min_price_sku
      @sale_min_price_sku ||= generic_prices
        .map { |p| [p.sku, p.sale] if p.sale.present? }
        .compact
        .sort_by { |(_sku, sale)| sale }
        .first
        &.first
    end

    def sale_max_price_sku
      @sale_max_price_sku ||= generic_prices
        .map { |p| [p.sku, p.sale] if p.sale.present? }
        .compact
        .sort_by { |(_sku, sale)| sale }
        .last
        &.first
    end

    def sell_min_price_sku
      @sell_min_price_sku ||= generic_prices
        .map { |price| [price.sku, price.sell] }
        .sort_by { |(_sku, sell)| sell }
        .first
        &.first
    end

    def sell_max_price_sku
      @sell_max_price_sku ||= generic_prices
        .map { |price| [price.sku, price.sell] }
        .sort_by { |(_sku, sell)| sell }
        .last
        &.first
    end

    def sell_max_price_attribute
      if sell_max_price_sku.on_sale?
        "sale_price"
      else
        "regular_price"
      end
    end

    def msrp_min_price_sku
      @msrp_min_price_sku ||= records
        .map { |sku| [sku, sku.msrp] if sku.msrp.present? }
        .compact
        .sort_by { |(_sku, msrp)| msrp }
        .first
        .first
    end

    def msrp_max_price_sku
      @msrp_max_price_sku ||= records
        .map { |sku| [sku, sku.msrp] if sku.msrp.present? }
        .compact
        .sort_by { |(_sku, msrp)| msrp }
        .last
        .first
    end

    def original_min_price_attribute
      if msrp_min_price.present? && msrp_min_price > sell_min_price
        "msrp"
      else
        "regular_price"
      end
    end

    def original_min_price_sku
      if msrp_min_price.present? && msrp_min_price > sell_min_price
        msrp_min_price_sku
      else
        regular_min_price_sku
      end
    end

    def original_max_price_attribute
      if msrp_max_price.present? && msrp_max_price > sell_max_price
        "msrp"
      else
        "regular_price"
      end
    end

    def original_max_price_sku
      if msrp_max_price.present? && msrp_max_price > sell_max_price
        msrp_max_price_sku
      else
        regular_max_price_sku
      end
    end

    # All localized selling prices grouped by experience_key
    # eg. { "europe" => [12.4, 34], "canada" => [11.8, 9] }
    #
    # @return [::Hash]
    def localized_selling_prices
      records.each_with_object({}) do |sku, memo|
        sku.flow_io_local_items.each do |local_item|
          memo[local_item.experience.key] ||= []
          memo[local_item.experience.key] << local_item.to_price.sell.to_f
        end
      end
    end

    # All localized minimum selling pricea grouped by experience_key
    # eg. { "europe" => 12.4, "canada" => 11.8 }
    #
    # @return [::Hash]
    def localized_min_sell_prices
      records.each_with_object({}) do |sku, memo|
        sku.flow_io_local_items.each do |local_item|
          sell_price = local_item.to_price.sell.to_f
          experience_key = local_item.experience.key

          memo[experience_key] ||= sell_price

          if sell_price < memo[experience_key]
            memo[experience_key] = sell_price
          end
        end
      end
    end

    def generic_prices
      @generic_prices ||= records.map(&:prices).flatten.select do |price|
        price.generic? && price.regular.currency == Money.default_currency
      end
    end
  end
end
