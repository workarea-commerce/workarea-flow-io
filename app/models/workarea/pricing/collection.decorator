module Workarea
  decorate Pricing::Collection, with: :flow_io do
    decorated { attr_accessor :flow_experience }

    def regular_min_price
      return super unless flow_experience.present?

      @regular_min_price ||= records
        .map { |pricing_sku| pricing_sku.find_price(experience: flow_experience).regular }
        .sort
        .first
    end

    def regular_max_price
      return super unless flow_experience.present?

      @regular_max_price ||= records
        .map { |pricing_sku| pricing_sku.find_price(experience: flow_experience).regular }
        .sort
        .last
    end

    def sale_min_price
      return super unless flow_experience.present?

      @sale_min_price ||= records
        .map { |pricing_sku| pricing_sku.sale_price_for_experience(flow_experience) }
        .compact
        .sort
        .first
    end

    def sale_max_price
      return super unless flow_experience.present?

      @sale_max_price ||= records
        .map { |pricing_sku| pricing_sku.sale_price_for_experience(flow_experience) }
        .compact
        .sort
        .last
    end

    def sell_min_price
      return super unless flow_experience.present?

      @sell_min_price ||= records
        .map { |pricing_sku| pricing_sku.find_price(experience: flow_experience).sell }
        .sort
        .first
    end

    def sell_max_price
      return super unless flow_experience.present?

      @sell_max_price ||= records
        .map { |pricing_sku| pricing_sku.find_price(experience: flow_experience).sell }
        .sort
        .last
    end

    def msrp_min_price
      return super unless flow_experience.present?

      @msrp_min_price ||= records
        .map { |pricing_sku| pricing_sku.msrp_for_experience(flow_experience) }
        .compact
        .sort
        .first
    end

    def msrp_max_price
      return super unless flow_experience.present?

      @msrp_max_price ||= records
        .map { |pricing_sku| pricing_sku.msrp_for_experience(flow_experience) }
        .compact
        .sort
        .last
    end
  end
end
