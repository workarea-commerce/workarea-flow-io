module Workarea
  decorate Pricing::Sku, with: :flow_io do
    decorated do
      embeds_many :flow_io_local_items, class_name: "Workarea::FlowIo::LocalItem"
    end

    def localized_price_hash(&block)
      flow_io_local_items.map do |local_item|
        [
          "#{local_item.experience.key}-#{local_item.experience.currency}",
          block.call(local_item)
        ]
      end.to_h.compact
    end

    # Flow pricing attribute to be used when localizing this price on the
    # storefront, should match a Flow Pricing Attribute configured and exported
    # to flow
    #
    def sell_price_key
      if on_sale? && sale.present?
        'sale'
      else
        'regular'
      end + '_price'
    end

    # Find the price to sell at for a specific options.
    #
    # Takes options :quantity, :experience (::Io::Flow::V0::Models::ExperienceSummary || ::Io::Flow::V0::Models::ExperienceGeo)
    #
    # @param [Hash]
    # @return [Pricing::Price]
    #
    def find_price(options = {})
      return super unless options[:experience].present?

      quantity = options[:quantity] || 1

      local_item = flow_io_local_items.detect do |item|
        item.experience.key == options[:experience].key
      end

      local_item&.to_price(quantity) ||
        Pricing::Price.new(regular: 0.to_m(options[:experience].currency))
    end
  end
end
