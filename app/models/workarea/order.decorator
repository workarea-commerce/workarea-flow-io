module Workarea
  decorate Order, with: :flow_io do
    decorated do
      embeds_one :experience,
        class_name: "Workarea::FlowIo::ExperienceGeo",
        as: :experienceable

      field :flow, type: Boolean, default: false
      field :flow_checkout_token, type: String

      field :flow_subtotal_price, type: Money
      field :flow_shipping_total, type: Money
      field :flow_tax_total,      type: Money
      field :flow_total_value,    type: Money
      field :flow_total_price,    type: Money
    end

    def currency
      experience&.currency || Money.default_currency.iso_code
    end

    # All flow price adjustments on this order.
    #
    # @return [FlowPriceAdjustmentSet]
    #
    def flow_price_adjustments
      FlowPriceAdjustmentSet.new(items.flat_map(&:flow_price_adjustments), experience)
    end

    def build_experience_from_flow_model(experience_geo)
      if experience_geo.present?
        country = Country.find_country_by_alpha3(experience_geo.country)
        build_experience(experience_geo.to_hash.merge(country: country))
      else
        self.experience = nil
      end
    end
  end
end
